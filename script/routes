#!/usr/bin/env php
<?php

// check for environement arg
foreach ($argv as $key => $value) {
    if (preg_match('/MAD_ENV=(.*)/', $value, $match)) {
        define('MAD_ENV', strtolower($match[1]));
        unset($argv[$key]);
        $argv = array_values($argv);
    }
}

/**
 * Set environment
 */
if (!defined('MAD_ENV')) define('MAD_ENV', isset($_SERVER['MAD_ENV']) ? $_SERVER['MAD_ENV'] : 'development');
require_once dirname(dirname(__FILE__)).'/config/environment.php';

$dispatcher = Mad_Controller_Dispatcher::getInstance();
$mapper = $dispatcher->getRouteMapper();

/**
 * Traverse all routes connected to the mapper in match order, 
 * and assemble an array of $routes used to build the output
 */
$routes = array();
foreach ($mapper->matchList as $route) {
  // name of this route, or empty string if anonymous
  $routeName = '';
  foreach ($mapper->routeNames as $name => $namedRoute) {
      if ($route === $namedRoute) { $routeName = $name; break; }
  }

  // request_method types recognized by this route, or empty string for any
  $methods = array('');
  if (isset($route->conditions['method']) && is_array($route->conditions['method']) ) {
    $methods = $route->conditions['method'];
  }

  // hardcoded defaults that can't be overriden by the request path like {:key=>"value"}
  $hardcodes = array();
  foreach ($route->hardCoded as $key) {
    $value = isset($route->defaults[$key]) ? $route->defaults[$key] : 'NULL';
    $hardcodes[] = ":{$key}=>\"{$value}\"";
  }
  $hardcodes = empty($hardcodes) ? '' : '{'. implode(', ', $hardcodes) .'}';  

  // route data for output 
  foreach ($methods as $method) {
    $routes[] = array('name'      => $routeName,
                      'method'    => $method,
                      'path'      => '/' . $route->routePath,
                      'hardcodes' => $hardcodes);
  }
}

// nothing to print?
if (empty($routes)) { exit; }

/**
 * Find the max $widths to size the output columns {'name'=>40, 'method'=>6, ...}
 */
$widths = array();
foreach (array_keys($routes[0]) as $key) {
  $width = 0;
  foreach($routes as $r) { 
    $l = strlen($r[$key]);
    if ($l > $width) { $width = $l; }
  }
  $widths[$key] = $width;
}

/**
 * Print the output
 */
foreach ($routes as $r) {
  echo str_pad($r['name'],   $widths['name'],   ' ', STR_PAD_LEFT),  ' ';
  echo str_pad($r['method'], $widths['method'], ' ', STR_PAD_RIGHT), ' ';
  echo str_pad($r['path'],   $widths['path'],   ' ', STR_PAD_RIGHT), ' ';
  echo $r['hardcodes'], PHP_EOL;
}
